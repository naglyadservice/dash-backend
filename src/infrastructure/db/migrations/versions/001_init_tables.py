"""init tables

Revision ID: 001
Revises:
Create Date: 2025-02-12 13:00:25.314074

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "001"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "controllers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("serial_number", sa.String(), nullable=False),
        sa.Column(
            "type",
            sa.Enum("CARWASH", "WATER_VENDING", "VACUUM", name="controllertype"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column(
            "status",
            sa.Enum("ACTIVE", "NOT_ACTIVE", name="controllerstatus"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("password_hash", sa.String(), nullable=False),
        sa.Column(
            "role",
            sa.Enum("SUPERADMIN", "ADMIN", "MANAGER", "USER", name="userrole"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "carwash_controllers",
        sa.Column("controller_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"],
            ["controllers.id"],
        ),
        sa.PrimaryKeyConstraint("controller_id"),
    )
    op.create_table(
        "companies",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("owner_id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "vacuum_controllers",
        sa.Column("controller_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"],
            ["controllers.id"],
        ),
        sa.PrimaryKeyConstraint("controller_id"),
    )
    op.create_table(
        "water_vending_controllers",
        sa.Column("controller_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"],
            ["controllers.id"],
        ),
        sa.PrimaryKeyConstraint("controller_id"),
    )
    op.create_table(
        "locations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("company_id", sa.Integer(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column(
            "type", sa.Enum("CARWASH", "VENDING", name="locationtype"), nullable=False
        ),
        sa.ForeignKeyConstraint(["company_id"], ["companies.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "location_devices",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("controller_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"], ["controllers.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["location_id"], ["locations.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "location_managers",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["location_id"], ["locations.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("controller_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column(
            "payment_method",
            sa.Enum("CASH", "MONOPAY", "LIQPAY", name="paymentmethod"),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("PENDING", "COMPLETED", "FAILED", name="paymentstatus"),
            nullable=False,
        ),
        sa.Column(
            "type",
            sa.Enum("CARWASH", "WATER_VENDING", "VACUUM", name="transactiontype"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"], ["controllers.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["location_id"], ["locations.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "carwash_transactions",
        sa.Column("transaction_id", sa.Integer(), nullable=False),
        sa.Column(
            "service_type",
            sa.Enum(
                "WATER",
                "WARM_WATER",
                "FOAM",
                "PINK_FOAM",
                "WAX",
                "OSMOSIS",
                "WINTER_CLEANER",
                name="carwashservicetype",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transactions.id"],
        ),
        sa.PrimaryKeyConstraint("transaction_id"),
    )
    op.create_table(
        "vacuum_transactions",
        sa.Column("transaction_id", sa.Integer(), nullable=False),
        sa.Column(
            "service_type",
            sa.Enum(
                "VACUUM",
                "AIR_BLOWING",
                "TIRE_INFLATION",
                "GLASS_WASHER",
                "RUBBER_BLACKENING",
                name="vacuumservicetype",
            ),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transactions.id"],
        ),
        sa.PrimaryKeyConstraint("transaction_id"),
    )
    op.create_table(
        "water_vending_transactions",
        sa.Column("transaction_id", sa.Integer(), nullable=False),
        sa.Column(
            "service_type",
            sa.Enum("WATER_1", "WATER_2", name="watervendingservicetype"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transactions.id"],
        ),
        sa.PrimaryKeyConstraint("transaction_id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("water_vending_transactions")
    op.drop_table("vacuum_transactions")
    op.drop_table("carwash_transactions")
    op.drop_table("transactions")
    op.drop_table("location_managers")
    op.drop_table("location_devices")
    op.drop_table("locations")
    op.drop_table("water_vending_controllers")
    op.drop_table("vacuum_controllers")
    op.drop_table("companies")
    op.drop_table("carwash_controllers")
    op.drop_table("users")
    op.drop_table("controllers")
    # ### end Alembic commands ###
