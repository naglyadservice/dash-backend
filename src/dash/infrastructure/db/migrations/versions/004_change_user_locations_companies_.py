"""change user-locations-companies relations

Revision ID: 004
Revises: 003
Create Date: 2025-05-09 23:11:58.772428

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference

# revision identifiers, used by Alembic.
revision: str = "004"
down_revision: Union[str, None] = "003"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("locations", sa.Column("company_id", sa.Integer(), nullable=False))
    op.drop_constraint("locations_owner_id_fkey", "locations", type_="foreignkey")
    op.create_foreign_key(
        "locations_company_id_fkey", "locations", "companies", ["company_id"], ["id"]
    )
    op.drop_column("locations", "owner_id")
    op.add_column("users", sa.Column("card_id", sa.String(), nullable=True))
    op.sync_enum_values(
        enum_schema="public",
        enum_name="userrole",
        new_values=["SUPERADMIN", "COMPANY_OWNER", "LOCATION_ADMIN", "USER"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="users", column_name="role"
            )
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(
        enum_schema="public",
        enum_name="userrole",
        new_values=[
            "SUPERADMIN",
            "COMPANY_OWNER",
            "COMPANY_ADMIN",
            "LOCATION_OWNER",
            "LOCATION_ADMIN",
            "USER",
        ],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="users", column_name="role"
            )
        ],
        enum_values_to_rename=[],
    )
    op.drop_column("users", "card_id")
    op.add_column(
        "locations",
        sa.Column("owner_id", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.drop_constraint("locations_company_id_fkey", "locations", type_="foreignkey")
    op.create_foreign_key(
        "locations_owner_id_fkey", "locations", "users", ["owner_id"], ["id"]
    )
    op.drop_column("locations", "company_id")
    # ### end Alembic commands ###
