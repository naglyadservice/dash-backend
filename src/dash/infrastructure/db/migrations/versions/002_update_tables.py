"""update tables

Revision ID: 002
Revises: 001
Create Date: 2025-04-08 19:14:07.449557

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "002"
down_revision: Union[str, None] = "001"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("ALTER TYPE userrole RENAME TO userrole_old")
    op.execute(
        "CREATE TYPE userrole AS ENUM ('SUPERADMIN', 'COMPANY_OWNER', 'COMPANY_ADMIN', 'LOCATION_OWNER', 'LOCATION_ADMIN', 'USER')"
    )
    op.execute("""
        ALTER TABLE users
        ALTER COLUMN role DROP DEFAULT,
        ALTER COLUMN role TYPE userrole
        USING role::text::userrole
    """)
    op.execute("DROP TYPE userrole_old")

    op.create_table(
        "location_admins",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("location_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["location_id"], ["locations.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_table("location_devices")
    op.drop_table("location_managers")
    op.add_column("controllers", sa.Column("location_id", sa.Integer(), nullable=True))
    op.add_column("controllers", sa.Column("monopay_token", sa.String(), nullable=True))
    op.create_foreign_key(
        "controllers_location_id_fkey",
        "controllers",
        "locations",
        ["location_id"],
        ["id"],
    )
    op.add_column("locations", sa.Column("owner_id", sa.Integer(), nullable=False))
    op.add_column("locations", sa.Column("name", sa.String(), nullable=False))
    op.alter_column("locations", "address", existing_type=sa.VARCHAR(), nullable=True)
    op.drop_constraint("locations_company_id_fkey", "locations", type_="foreignkey")
    op.create_foreign_key(
        "locations_owner_id_fkey", "locations", "users", ["owner_id"], ["id"]
    )
    op.drop_column("locations", "type")
    op.drop_column("locations", "company_id")
    op.add_column("payments", sa.Column("location_id", sa.Integer(), nullable=True))
    op.drop_constraint("payments_controller_id_fkey", "payments", type_="foreignkey")
    op.create_foreign_key(
        "payments_location_id_fkey",
        "payments",
        "locations",
        ["location_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "payments_controller_id_fkey",
        "payments",
        "controllers",
        ["controller_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.drop_constraint(
        "transactions_location_id_fkey", "transactions", type_="foreignkey"
    )
    op.drop_constraint(
        "transactions_controller_id_fkey", "transactions", type_="foreignkey"
    )
    op.create_foreign_key(
        "transactions_location_id_fkey",
        "transactions",
        "locations",
        ["location_id"],
        ["id"],
        ondelete="SET NULL",
    )
    op.create_foreign_key(
        "transactions_controller_id_fkey",
        "transactions",
        "controllers",
        ["controller_id"],
        ["id"],
        ondelete="SET NULL",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    pass
    # ### end Alembic commands ###
