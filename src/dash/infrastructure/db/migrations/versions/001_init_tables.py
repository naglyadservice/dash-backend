"""init tables

Revision ID: 001
Revises: 
Create Date: 2025-05-10 19:21:27.326176

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('CARWASH', 'WATER_VENDING', 'VACUUM', name='transactiontype').create(op.get_bind())
    sa.Enum('BILL', 'COIN', 'PAYPASS', 'MONOPAY', 'LIQPAY', 'FREE', name='paymenttype').create(op.get_bind())
    sa.Enum('CREATED', 'PROCESSING', 'HOLD', 'COMPLETED', 'REVERSED', 'EXPIRED', 'FAILED', name='paymentstatus').create(op.get_bind())
    sa.Enum('ACTIVE', 'NOT_ACTIVE', name='controllerstatus').create(op.get_bind())
    sa.Enum('CARWASH', 'WATER_VENDING', 'VACUUM', name='controllertype').create(op.get_bind())
    sa.Enum('SUPERADMIN', 'COMPANY_OWNER', 'LOCATION_ADMIN', name='adminrole').create(op.get_bind())
    op.create_table('admin_users',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('password_hash', sa.String(), nullable=False),
    sa.Column('role', postgresql.ENUM('SUPERADMIN', 'COMPANY_OWNER', 'LOCATION_ADMIN', name='adminrole', create_type=False), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('companies',
    sa.Column('owner_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['admin_users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('customers',
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('password_hash', sa.String(), nullable=True),
    sa.Column('card_id', sa.String(), nullable=True),
    sa.Column('balance', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint('email IS NOT NULL OR card_id IS NOT NULL', name='cc_customer_identity'),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('company_id', 'card_id', name='uix_customer_company_card_id'),
    sa.UniqueConstraint('company_id', 'email', name='uix_customer_company_email')
    )
    op.create_index('ix_customer_company_id', 'customers', ['company_id', 'id'], unique=False)
    op.create_index(op.f('ix_customers_email'), 'customers', ['email'], unique=False)
    op.create_table('locations',
    sa.Column('company_id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('address', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('controllers',
    sa.Column('device_id', sa.String(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.Column('type', postgresql.ENUM('CARWASH', 'WATER_VENDING', 'VACUUM', name='controllertype', create_type=False), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('version', sa.String(), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'NOT_ACTIVE', name='controllerstatus', create_type=False), nullable=False),
    sa.Column('monopay_token', sa.String(), nullable=True),
    sa.Column('monopay_active', sa.Boolean(), nullable=False),
    sa.Column('liqpay_public_key', sa.String(), nullable=True),
    sa.Column('liqpay_private_key', sa.String(), nullable=True),
    sa.Column('liqpay_active', sa.Boolean(), nullable=False),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('device_id')
    )
    op.create_table('location_admins',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['admin_users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('carwash_controllers',
    sa.Column('controller_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['controller_id'], ['controllers.id'], ),
    sa.PrimaryKeyConstraint('controller_id')
    )
    op.create_table('payments',
    sa.Column('invoice_id', sa.String(), nullable=True),
    sa.Column('controller_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('status', postgresql.ENUM('CREATED', 'PROCESSING', 'HOLD', 'COMPLETED', 'REVERSED', 'EXPIRED', 'FAILED', name='paymentstatus', create_type=False), nullable=False),
    sa.Column('type', postgresql.ENUM('BILL', 'COIN', 'PAYPASS', 'MONOPAY', 'LIQPAY', 'FREE', name='paymenttype', create_type=False), nullable=False),
    sa.Column('failure_reason', sa.String(), nullable=True),
    sa.Column('created_at_controller', sa.DateTime(timezone=True), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['controller_id'], ['controllers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invoice_id')
    )
    op.create_table('transactions',
    sa.Column('controller_transaction_id', sa.Integer(), nullable=False),
    sa.Column('controller_id', sa.UUID(), nullable=False),
    sa.Column('location_id', sa.UUID(), nullable=True),
    sa.Column('coin_amount', sa.Integer(), nullable=False),
    sa.Column('bill_amount', sa.Integer(), nullable=False),
    sa.Column('prev_amount', sa.Integer(), nullable=False),
    sa.Column('free_amount', sa.Integer(), nullable=False),
    sa.Column('qr_amount', sa.Integer(), nullable=False),
    sa.Column('paypass_amount', sa.Integer(), nullable=False),
    sa.Column('type', postgresql.ENUM('CARWASH', 'WATER_VENDING', 'VACUUM', name='transactiontype', create_type=False), nullable=False),
    sa.Column('created_at_controller', sa.DateTime(timezone=True), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['controller_id'], ['controllers.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['location_id'], ['locations.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vacuum_controllers',
    sa.Column('controller_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['controller_id'], ['controllers.id'], ),
    sa.PrimaryKeyConstraint('controller_id')
    )
    op.create_table('water_vending_controllers',
    sa.Column('controller_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['controller_id'], ['controllers.id'], ),
    sa.PrimaryKeyConstraint('controller_id')
    )
    op.create_table('carwash_transactions',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('transaction_id')
    )
    op.create_table('vacuum_transactions',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('transaction_id')
    )
    op.create_table('water_vending_transactions',
    sa.Column('transaction_id', sa.UUID(), nullable=False),
    sa.Column('out_liters_1', sa.Integer(), nullable=False),
    sa.Column('out_liters_2', sa.Integer(), nullable=False),
    sa.Column('sale_type', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['transaction_id'], ['transactions.id'], ),
    sa.PrimaryKeyConstraint('transaction_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('water_vending_transactions')
    op.drop_table('vacuum_transactions')
    op.drop_table('carwash_transactions')
    op.drop_table('water_vending_controllers')
    op.drop_table('vacuum_controllers')
    op.drop_table('transactions')
    op.drop_table('payments')
    op.drop_table('carwash_controllers')
    op.drop_table('location_admins')
    op.drop_table('controllers')
    op.drop_table('locations')
    op.drop_index(op.f('ix_customers_email'), table_name='customers')
    op.drop_index('ix_customer_company_id', table_name='customers')
    op.drop_table('customers')
    op.drop_table('companies')
    op.drop_table('admin_users')
    sa.Enum('SUPERADMIN', 'COMPANY_OWNER', 'LOCATION_ADMIN', name='adminrole').drop(op.get_bind())
    sa.Enum('CARWASH', 'WATER_VENDING', 'VACUUM', name='controllertype').drop(op.get_bind())
    sa.Enum('ACTIVE', 'NOT_ACTIVE', name='controllerstatus').drop(op.get_bind())
    sa.Enum('CREATED', 'PROCESSING', 'HOLD', 'COMPLETED', 'REVERSED', 'EXPIRED', 'FAILED', name='paymentstatus').drop(op.get_bind())
    sa.Enum('BILL', 'COIN', 'PAYPASS', 'MONOPAY', 'LIQPAY', 'FREE', name='paymenttype').drop(op.get_bind())
    sa.Enum('CARWASH', 'WATER_VENDING', 'VACUUM', name='transactiontype').drop(op.get_bind())
    # ### end Alembic commands ###
