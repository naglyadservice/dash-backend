"""add laundry tables

Revision ID: 26
Revises: 25
Create Date: 2025-08-07 04:07:06.205797

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from alembic_postgresql_enum import TableReference
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "26"
down_revision: Union[str, None] = "25"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "PAYMENT_CONFIRMED",
        "WAITING_START",
        "IN_PROGRESS",
        "COMPLETED",
        "TIMEOUT",
        "ERROR",
        name="laundrysessionstatus",
    ).create(op.get_bind())
    sa.Enum("AVAILABLE", "IN_USE", "PROCESSING", name="laundrystatus").create(
        op.get_bind()
    )
    sa.Enum("FIXED", "PER_MINUTE", name="laundrytarifftype").create(op.get_bind())
    op.create_table(
        "laundry_controllers",
        sa.Column("controller_id", sa.UUID(), nullable=False),
        sa.Column("input_id", sa.Integer(), nullable=False),
        sa.Column(
            "tariff_type",
            postgresql.ENUM(
                "FIXED", "PER_MINUTE", name="laundrytarifftype", create_type=False
            ),
            nullable=False,
        ),
        sa.Column(
            "laundry_status",
            postgresql.ENUM(
                "AVAILABLE",
                "IN_USE",
                "PROCESSING",
                name="laundrystatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("timeout_minutes", sa.Integer(), nullable=False),
        sa.Column("fixed_price", sa.Integer(), nullable=False),
        sa.Column("max_hold_amount", sa.Integer(), nullable=False),
        sa.Column("price_per_minute_before_transition", sa.Integer(), nullable=False),
        sa.Column("transition_after_minutes", sa.Integer(), nullable=False),
        sa.Column("price_per_minute_after_transition", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["controller_id"],
            ["controllers.id"],
        ),
        sa.PrimaryKeyConstraint("controller_id"),
    )
    op.create_table(
        "laundry_transactions",
        sa.Column("transaction_id", sa.UUID(), nullable=False),
        sa.Column("payment_id", sa.UUID(), nullable=False),
        sa.Column("tariff_type", sa.String(), nullable=False),
        sa.Column(
            "session_status",
            postgresql.ENUM(
                "PAYMENT_CONFIRMED",
                "WAITING_START",
                "IN_PROGRESS",
                "COMPLETED",
                "TIMEOUT",
                "ERROR",
                name="laundrysessionstatus",
                create_type=False,
            ),
            nullable=False,
        ),
        sa.Column("session_start_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("session_end_time", sa.DateTime(timezone=True), nullable=True),
        sa.Column("hold_amount", sa.Integer(), nullable=True),
        sa.Column("refund_amount", sa.Integer(), nullable=True),
        sa.Column("final_amount", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["payment_id"],
            ["payments.id"],
        ),
        sa.ForeignKeyConstraint(
            ["transaction_id"],
            ["transactions.id"],
        ),
        sa.PrimaryKeyConstraint("transaction_id"),
    )
    op.alter_column(
        "transactions",
        "controller_transaction_id",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.alter_column(
        "transactions",
        "created_at_controller",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.sync_enum_values(  # type: ignore
        enum_schema="public",
        enum_name="controllertype",
        new_values=["CARWASH", "WATER_VENDING", "VACUUM", "FISCALIZER", "LAUNDRY"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="controllers", column_name="type"
            )
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(  # type: ignore
        enum_schema="public",
        enum_name="transactiontype",
        new_values=["CARWASH", "WATER_VENDING", "VACUUM", "FISCALIZER", "LAUNDRY"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="transactions", column_name="type"
            )
        ],
        enum_values_to_rename=[],
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.sync_enum_values(  # type: ignore
        enum_schema="public",
        enum_name="transactiontype",
        new_values=["CARWASH", "WATER_VENDING", "VACUUM", "FISCALIZER"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="transactions", column_name="type"
            )
        ],
        enum_values_to_rename=[],
    )
    op.sync_enum_values(  # type: ignore
        enum_schema="public",
        enum_name="controllertype",
        new_values=["CARWASH", "WATER_VENDING", "VACUUM", "FISCALIZER"],
        affected_columns=[
            TableReference(
                table_schema="public", table_name="controllers", column_name="type"
            )
        ],
        enum_values_to_rename=[],
    )
    op.alter_column(
        "transactions",
        "created_at_controller",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "transactions",
        "controller_transaction_id",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.drop_table("laundry_transactions")
    op.drop_table("laundry_controllers")
    sa.Enum("FIXED", "PER_MINUTE", name="laundrytarifftype").drop(op.get_bind())
    sa.Enum("AVAILABLE", "IN_USE", "PROCESSING", name="laundrystatus").drop(
        op.get_bind()
    )
    sa.Enum(
        "PAYMENT_CONFIRMED",
        "WAITING_START",
        "IN_PROGRESS",
        "COMPLETED",
        "TIMEOUT",
        "ERROR",
        name="laundrysessionstatus",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
